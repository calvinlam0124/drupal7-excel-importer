<?php

require_once(getcwd() . "/sites/all/libraries/Spout/Autoloader/autoload.php");

use Box\Spout\Reader\ReaderFactory;
use Box\Spout\Common\Type;

function importer_menu()
{
  $items = array();
  $items['importer/psehk_importer'] = array(
    'title' => 'PSEHK product importer',
    'description' => 'PSEHK product importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('importer_form'),
    'access callback' => TRUE
  );
  return $items;
}

function importer_form($form, &$form_state)
{
  $form['file'] = array(
    '#type' => 'file',
    '#name' => 'file',
    '#title' => t('File'),
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );

  return $form;
}

function importer_form_validate($form, &$form_state)
{
  if ($_FILES["file"]["error"] !== UPLOAD_ERR_OK) {
    form_set_error('file', t('Excel file is required'));
  }
}

function importer_form_submit($form, &$form_state)
{
  $filePath = $_FILES["file"]["tmp_name"];
  $reader = ReaderFactory::create(Type::XLSX);
  $reader->open($filePath);
  foreach ($reader->getSheetIterator() as $sheet) {
    switch ($sheet->getName()) {
      case "product":
        importer_handle_product_tab($sheet);
        break;
//      case "product_variation":
//      case "product_specification":
//        importer_handle_product_specification_tab($sheet);
//        break;
//      case "pq_curve":
//      case "support_document":
//      case "accessory":
//      case "related_product":
//      default:
//        importer_handle_product_tab($sheet);
//        break;
    }
  }
  drupal_set_message(t('Excel file imported'));
  $reader->close();
}

function importer_handle_product_tab($sheet)
{
  foreach ($sheet->getRowIterator() as $key => $row) {
    if ($key == 1) {
      continue;
    }
    importer_create_product_node($row);
  }
}

function importer_handle_product_specification_tab($sheet)
{
  foreach ($sheet->getRowIterator() as $key => $row) {
//    if ($key == 1) {
//      continue;
//    }
    importer_create_product_specification($row);
  }
}

function importer_create_product_node($row)
{
  global $user;

  $title = $row[0];
  $product_name = $row[1];
  $product_thumbnail = $row[2];
  $product_thumbnail_alt = $row[3];

  $product_thumbnail_title = $row[4];
  $product_description = $row[5];
  $product_sku = $row[6];
  $features = $row[7];
  $product_catagory = $row[8];

  $photos = $row[9];

  // field values preprocessing
  $product_description = "<ul><li>" . implode("</li><li>", explode("\n", $product_description)) . "</li></ul>";
  $features = "<ul><li>" . implode("</li><li>", explode("\n", $features)) . "</li></ul>";
  $terms = taxonomy_get_term_by_name($product_catagory);
  if (is_array($terms)) {
    foreach ($terms as $term) {
      if ($term->vocabulary_machine_name == 'product_category') {
        $folderid = $term->tid;
        break;
      }
    }
  }

  // create node
  $values = array(
    'type' => 'product',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 1,
    'promote' => 0,
  );
  $entity = entity_create('node', $values);
  $ewrapper = entity_metadata_wrapper('node', $entity);


  // save image
  $file = importer_image_attribute($product_thumbnail, $product_thumbnail_alt, $product_thumbnail_title);


  // set node values
  $ewrapper->title->set($title);
  $ewrapper->field_product_name->set($product_name);
  $ewrapper->field_product_thumbnail->set((array)importer_get_file_by_filename($product_thumbnail));
  $ewrapper->field_product_description->set(['value' => $product_description, 'format' => 'full_html']);
  $ewrapper->field_product_sku->set($product_sku);
  $ewrapper->field_product_featues->set(['value' => $features, 'format' => 'full_html']);
  $ewrapper->field_product_catagory->set($folderid);
  $ewrapper->save();
}

function importer_create_product_specification($row)
{
  global $user;

  $product_title = $row[0]; // "FV-17CU7"
  $voltage = $row[1];
  $frequency = $row[2];
  $air_volume_super_cmh = $row[3];

  $air_volume_hi_cmh = $row[4];
  $air_volume_lo_cmh = $row[5];
  $air_volume_cmh = $row[6];
  $air_volume_super_cfm = $row[7];

  $air_volume_lo_cfm = $row[8];
  $air_volume_cfm = $row[9];
  $air_volume_exhaust_cmh = $row[10];
  $air_volume_intake_cmh = $row[11];

  $air_volume_exhaust_cfm = $row[12];
  $air_volume_intake_cfm = $row[13];
  $air_volume_v_hi_cmh = $row[14];
  $air_volume_v_lo_cmh = $row[15];

  $air_volume_v_hi_cfm = $row[16];
  $air_volume_v_lo_cfm = $row[17];
  $air_volume_ap_hi_m3min = $row[18];
  $air_volume_ap_mid_m3min = $row[19];

  $air_volume_ap_lo_m3min = $row[20];
  $air_volume_aph_hi_m3m = $row[21];
  $air_volume_aph_mid_m3 = $row[22];
  $air_volume_aph_lo_m = $row[23];

  $consumption_normal_super_w = $row[24];
  $consumption_normal_hi_w = $row[25];
  $consumption_normal_lo_w = $row[26];
  $consumption_normal_w = $row[27];

  $consumption_normal_mid_w = $row[28];
  $consumption_exhaust_w = $row[29];
  $consumption_intake_w = $row[30];
  $consumption_v_hi_w = $row[31];

  $consumption_v_lo_w = $row[32];
  $consumption_heat_hi_w = $row[33];
  $consumption_heat_lo_w = $row[34];
  $consumption_sauna_hi_w = $row[35];

  $consumption_sauna_lo_w = $row[36];
  $consumption_dry_hi_w = $row[37];
  $consumption_dry_lo_w = $row[38];
  $consumption_ap_hi_w = $row[39];

  $consumption_ap_mid_w = $row[40];
  $consumption_ap_lo_w = $row[41];
  $consumption_aph_hi_w = $row[42];
  $consumption_aph_mid_w = $row[43];

  $consumption_aph_lo_w = $row[44];
  $consumption_heat_on_hi_w = $row[45];
  $consumption_heat_on_lo_w = $row[46];
  $consumption_heaton_w = $row[47];

  $consumption_heat_off_hi_w = $row[48];
  $consumption_heat_off_lo_w = $row[49];
  $consumption_heatoff_w = $row[50];
  $consumption_fan_hi_w = $row[51];

  $consumption_fan_lo_w = $row[52];
  $consumption_fan_light_hi_w = $row[53];
  $consumption_fan_light_lo_w = $row[54];
  $current_super_a = $row[55];

  $current_hi_a = $row[56];
  $current_lo_a = $row[57];
  $current_a = $row[58];
  $current_mid_a = $row[59];

  $current_exhaust = $row[60];
  $current_intake = $row[61];
  $current_ap_hi_a = $row[62];
  $current_ap_mid_a = $row[63];

  $current_ap_lo_a = $row[64];
  $current_aph_hi_a = $row[65];
  $current_aph_mid_a = $row[66];
  $current_aph_lo_a = $row[67];

  $current_heat_on_hi_a = $row[68];
  $current_heat_on_lo_a = $row[69];
  $current_heat_on_a = $row[70];
  $current_heat_off_lo_a = $row[71];

  $current_heat_off_hi_a = $row[72];
  $current_heat_off_a = $row[73];
  $current_fan_lo_a = $row[74];
  $current_fan_hi_a = $row[75];

  $current_fan_hi_a = $row[76];
  $current_fan_light_hi_a = $row[77];
  $current_fan_light_lo_a = $row[78];
  $rpm_normal_super_min1 = $row[79];

  $rpm_normal_hi_min1 = $row[80];
  $rpm_normal_mid_min1 = $row[81];
  $rpm_normal_lo_min1 = $row[82];
  $rpm_normal_min1 = $row[83];

  $rpm_exhaust_min1 = $row[84];
  $rpm_intake_min1 = $row[85];
  $noise_hi_dba = $row[86];
  $noise_lo_dba = $row[87];

  $noise_dba = $row[88];
  $noise_exhaust_dba = $row[89];
  $noise_intake_dba = $row[90];
  $noise_v_hi_dba = $row[91];

  $noise_v_lo_dba = $row[92];
  $noise_heat_hi_dba = $row[93];
  $noise_heat_lo_dba = $row[94];
  $noise_sauna_sweat_dba = $row[95];

  $noise_sauna_moist_dba = $row[96];
  $noise_dry_hi_dba = $row[97];
  $noise_dry_lo_dba = $row[98];
  $noise_ap_hi_dba = $row[99];

  $noise_ap_mid_dba = $row[100];
  $noise_ap_lo_db_ = $row[101];
  $noise_aph_hi_dba = $row[102];
  $noise_aph_mid_dba = $row[103];

  $noise_aph_lo_dba = $row[104];
  $weight = $row[105];
  $installation_space = $row[106];
  $duct_size = $row[107];

  $impeller_diameter = $row[108];
  $ambient_temperature = $row[109];
  $ip_rating = $row[110];
  $feature = $row[111];

  $note = $row[112];
  $phase = $row[113];
  $cs_hi_dba = $row[114];
  $cs_lo_dba = $row[115];

  $ss_hi_dba = $row[116];
  $ss_lo_dba = $row[117];
  $ds_hi_dba = $row[118];
  $ds_lo_dba = $row[119];

  $wheel_diameter_cm = $row[120];
  $hood_diameter_mm = $row[121];
  $hood_thickness_outside_mm = $row[122];
  $cap_diameter_mm = $row[123];

  $cap_thickness_outside_mm = $row[412];
  $apd_mm = $row[125];
  $dimension_of_net_mm = $row[126];
  $av_hi_ms = $row[127];

  $av_lo_ms = $row[128];
  $av_ms = $row[129];
  $av_hi_mmin = $row[130];
  $av_lo_mmin = $row[131];

  $av_mid_mmin = $row[132];
  $av_hi_ftmin = $row[133];
  $av_lo_ftmin = $row[134];
  $av_mid_ftmin = $row[135];

  $ad_hi_m3min = $row[136];
  $ad_lo_m3min = $row[137];
  $ad_mid_m3min = $row[138];
  $ad_hi_ft3min = $row[139];

  $ad_lo_ft3min = $row[140];
  $ad_mid_ft3min = $row[141];
  $dehumidifying_capacity = $row[142];
  $water_tank_capacity = $row[143];

  $dimension_h_mm = $row[144];
  $dimension_h_mm = $row[145];
  $dimension_w_mm = $row[146];
  $dimension_d_mm = $row[147];

  $humidifying_capacity_ml_h = $row[148];
  $applicable_area_m2 = $row[149];
  $applicable_area_ft2 = $row[150];
  $effective_distance_m = $row[151];

  $effective_distance_ft = $row[152];
  $ov_hi_ms = $row[153];
  $ov_lo_ms = $row[154];
  $drying_time = $row[155];

  $maximum_capacity = $row[156];
  $capacity_at_12m = $row[157];
  $total_head_m = $row[158];
  $suction_head = $row[159];

  $motor_power = $row[160];
  $input_wattage = $row[161];
  $output_wattage = $row[162];
  $switch_on_pressure_kgfcm2 = $row[163];

  $switch_off_pressure_kgfcm2 = $row[164];
  $sp_inch = $row[165];
  $sp_mm = $row[166];
  $dp_inch = $row[167];

  $dp_mm = $row[168];
  $pp_inch = $row[169];
  $pp_mm = $row[170];
  $size_l = $row[171];

  $size_w = $row[172];
  $size_h = $row[173];
  $awt = $row[174];


  krumo($row);
  die("die");


  $file_temp = file_get_contents('./profiles/multisite/files/official-photo.png');
  $file_temp = file_save_data($file_temp, file_directory_path() . '/official_photos/official-photo.png', FILE_EXISTS_RENAME);
  $node->field_photo = array(
    array(
      'fid' => 'upload',
      'title' => basename($file_temp),
      'filename' => basename($file_temp),
      'filepath' => $file_temp,
      'filesize' => filesize($file_temp),
    ),
  );


  $title = "abc";
  $field_voltage = "110";


  // create node
  $values = array(
    'type' => 'product_specification',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 1,
    'promote' => 0,
  );
  $entity = entity_create('node', $values);
  $ewrapper = entity_metadata_wrapper('node', $entity);


  // set node values
  //$ewrapper->title->set($title);
  $ewrapper->product_title->set($product_title);
  $ewrapper->voltage->set($voltage);
  $ewrapper->frequency->set($frequency);
  $ewrapper->air_volume_super_cmh->set($air_volume_super_cmh);

  $ewrapper->air_volume_hi_cmh->set($product_title);
  $ewrapper->air_volume_lo_cmh->set($product_title);
  $ewrapper->air_volume_cmh->set($product_title);
  $ewrapper->air_volume_super_cfm->set($product_title);

  $ewrapper->air_volume_lo_cfm->set($product_title);
  $ewrapper->air_volume_cfm->set($product_title);
  $ewrapper->air_volume_exhaust_cmh->set($product_title);
  $ewrapper->air_volume_intake_cmh->set($product_title);

  $ewrapper->air_volume_exhaust_cfm->set($product_title);
  $ewrapper->air_volume_intake_cfm->set($product_title);
  $ewrapper->air_volume_v_hi_cmh->set($product_title);
  $ewrapper->air_volume_v_lo_cmh->set($product_title);

  $ewrapper->air_volume_v_hi_cfm->set($product_title);
  $ewrapper->air_volume_v_lo_cfm->set($product_title);
  $ewrapper->air_volume_ap_hi_m3min->set($product_title);
  $ewrapper->air_volume_ap_mid_m3min->set($product_title);

  $ewrapper->air_volume_ap_lo_m3min->set($product_title);
  $ewrapper->air_volume_aph_hi_m3m->set($product_title);
  $ewrapper->air_volume_aph_mid_m3->set($product_title);
  $ewrapper->air_volume_aph_lo_m->set($product_title);

  $ewrapper->consumption_normal_super_w->set($product_title);
  $ewrapper->consumption_normal_hi_w->set($product_title);
  $ewrapper->consumption_normal_lo_w->set($product_title);
  $ewrapper->consumption_normal_w->set($product_title);

  $ewrapper->consumption_normal_mid_w->set($product_title);
  $ewrapper->consumption_exhaust_w->set($product_title);
  $ewrapper->consumption_intake_w->set($product_title);
  $ewrapper->consumption_v_hi_w->set($product_title);

  $ewrapper->consumption_v_lo_w->set($product_title);
  $ewrapper->consumption_heat_hi_w->set($product_title);
  $ewrapper->consumption_heat_lo_w->set($product_title);
  $ewrapper->consumption_sauna_hi_w->set($product_title);

  $ewrapper->consumption_sauna_lo_w->set($product_title);
  $ewrapper->consumption_dry_hi_w->set($product_title);
  $ewrapper->consumption_dry_lo_w->set($product_title);
  $ewrapper->consumption_ap_hi_w->set($product_title);

  $ewrapper->consumption_ap_mid_w->set($product_title);
  $ewrapper->consumption_ap_lo_w->set($product_title);
  $ewrapper->consumption_aph_hi_w->set($product_title);
  $ewrapper->consumption_aph_mid_w->set($product_title);

  $ewrapper->consumption_aph_lo_w->set($product_title);
  $ewrapper->consumption_heat_on_hi_w->set($product_title);
  $ewrapper->consumption_heat_on_lo_w->set($product_title);
  $ewrapper->consumption_heaton_w->set($product_title);

  $ewrapper->consumption_heat_off_hi_w->set($product_title);
  $ewrapper->consumption_heat_off_lo_w->set($product_title);
  $ewrapper->consumption_heatoff_w->set($product_title);
  $ewrapper->consumption_fan_hi_w->set($product_title);

  $ewrapper->consumption_fan_lo_w->set($product_title);
  $ewrapper->consumption_fan_light_hi_w->set($product_title);
  $ewrapper->consumption_fan_light_lo_w->set($product_title);
  $ewrapper->current_super_a->set($product_title);

  $ewrapper->current_hi_a->set($product_title);
  $ewrapper->current_lo_a->set($product_title);
  $ewrapper->current_a->set($product_title);
  $ewrapper->current_mid_a->set($product_title);

  $ewrapper->current_exhaust->set($product_title);
  $ewrapper->current_intake->set($product_title);
  $ewrapper->current_ap_hi_a->set($product_title);
  $ewrapper->current_ap_mid_a->set($product_title);

  $ewrapper->current_ap_lo_a->set($product_title);
  $ewrapper->current_aph_hi_a->set($product_title);
  $ewrapper->current_aph_mid_a->set($product_title);
  $ewrapper->current_aph_lo_a->set($product_title);

  $ewrapper->current_heat_on_hi_a->set($product_title);
  $ewrapper->current_heat_on_lo_a->set($product_title);
  $ewrapper->current_heat_on_a->set($product_title);
  $ewrapper->current_heat_off_lo_a->set($product_title);

  $ewrapper->current_heat_off_hi_a->set($product_title);
  $ewrapper->current_heat_off_a->set($product_title);
  $ewrapper->current_fan_lo_a->set($product_title);
  $ewrapper->current_fan_hi_a->set($product_title);

  $ewrapper->current_fan_hi_a->set($product_title);
  $ewrapper->current_fan_light_hi_a->set($product_title);
  $ewrapper->current_fan_light_lo_a->set($product_title);
  $ewrapper->rpm_normal_super_min1->set($product_title);

  $ewrapper->rpm_normal_hi_min1->set($product_title);
  $ewrapper->rpm_normal_mid_min1->set($product_title);
  $ewrapper->rpm_normal_lo_min1->set($product_title);
  $ewrapper->rpm_normal_min1->set($product_title);

  $ewrapper->rpm_exhaust_min1->set($product_title);
  $ewrapper->rpm_intake_min1->set($product_title);
  $ewrapper->noise_hi_dba->set($product_title);
  $ewrapper->noise_lo_dba->set($product_title);

  $ewrapper->noise_dba->set($product_title);
  $ewrapper->noise_exhaust_dba->set($product_title);
  $ewrapper->noise_intake_dba->set($product_title);
  $ewrapper->noise_v_hi_dba->set($product_title);

  $ewrapper->noise_v_lo_dba->set($product_title);
  $ewrapper->noise_heat_hi_dba->set($product_title);
  $ewrapper->noise_heat_lo_dba->set($product_title);
  $ewrapper->noise_sauna_sweat_dba->set($product_title);

  $ewrapper->noise_sauna_moist_dba->set($product_title);
  $ewrapper->noise_dry_hi_dba->set($product_title);
  $ewrapper->noise_dry_lo_dba->set($product_title);
  $ewrapper->noise_ap_hi_dba->set($product_title);

  $ewrapper->noise_ap_mid_dba->set($product_title);
  $ewrapper->noise_ap_lo_db_->set($product_title);
  $ewrapper->noise_aph_hi_dba->set($product_title);
  $ewrapper->noise_aph_mid_dba->set($product_title);

  $ewrapper->noise_aph_lo_dba->set($product_title);
  $ewrapper->weight->set($product_title);
  $ewrapper->installation_space->set($product_title);
  $ewrapper->duct_size->set($product_title);

  $ewrapper->impeller_diameter->set($product_title);
  $ewrapper->ambient_temperature->set($product_title);
  $ewrapper->ip_rating->set($product_title);
  $ewrapper->feature->set($product_title);

  $ewrapper->note->set($product_title);
  $ewrapper->phase->set($product_title);
  $ewrapper->cs_hi_dba->set($product_title);
  $ewrapper->cs_lo_dba->set($product_title);

  $ewrapper->ss_hi_dba->set($product_title);
  $ewrapper->ss_lo_dba->set($product_title);
  $ewrapper->ds_hi_dba->set($product_title);
  $ewrapper->ds_lo_dba->set($product_title);

  $ewrapper->wheel_diameter_cm->set($product_title);
  $ewrapper->hood_diameter_mm->set($product_title);
  $ewrapper->hood_thickness_outside_mm->set($product_title);
  $ewrapper->cap_diameter_mm->set($product_title);

  $ewrapper->cap_thickness_outside_mm->set($product_title);
  $ewrapper->apd_mm->set($product_title);
  $ewrapper->dimension_of_net_mm->set($product_title);
  $ewrapper->av_hi_ms->set($product_title);

  $ewrapper->av_lo_ms->set($product_title);
  $ewrapper->av_ms->set($product_title);
  $ewrapper->av_hi_mmin->set($product_title);
  $ewrapper->av_lo_mmin->set($product_title);

  $ewrapper->av_mid_mmin->set($product_title);
  $ewrapper->av_hi_ftmin->set($product_title);
  $ewrapper->av_lo_ftmin->set($product_title);
  $ewrapper->av_mid_ftmin->set($product_title);

  $ewrapper->ad_hi_m3min->set($product_title);
  $ewrapper->ad_lo_m3min->set($product_title);
  $ewrapper->ad_mid_m3min->set($product_title);
  $ewrapper->ad_hi_ft3min->set($product_title);

  $ewrapper->ad_lo_ft3min->set($product_title);
  $ewrapper->ad_mid_ft3min->set($product_title);
  $ewrapper->dehumidifying_capacity->set($product_title);
  $ewrapper->water_tank_capacity->set($product_title);

  $ewrapper->dimension_h_mm->set($product_title);
  $ewrapper->dimension_h_mm->set($product_title);
  $ewrapper->dimension_w_mm->set($product_title);
  $ewrapper->dimension_d_mm->set($product_title);

  $ewrapper->humidifying_capacity_ml_h->set($product_title);
  $ewrapper->applicable_area_m2->set($product_title);
  $ewrapper->applicable_area_ft2->set($product_title);
  $ewrapper->effective_distance_m->set($product_title);

  $ewrapper->effective_distance_ft->set($product_title);
  $ewrapper->ov_hi_ms->set($product_title);
  $ewrapper->ov_lo_ms->set($product_title);
  $ewrapper->drying_time->set($product_title);

  $ewrapper->maximum_capacity->set($product_title);
  $ewrapper->capacity_at_12m->set($product_title);
  $ewrapper->total_head_m->set($product_title);
  $ewrapper->suction_head->set($product_title);

  $ewrapper->motor_power->set($product_title);
  $ewrapper->input_wattage->set($product_title);
  $ewrapper->output_wattage->set($product_title);
  $ewrapper->switch_on_pressure_kgfcm2->set($product_title);

  $ewrapper->switch_off_pressure_kgfcm2->set($product_title);
  $ewrapper->sp_inch->set($product_title);
  $ewrapper->sp_mm->set($product_title);
  $ewrapper->dp_inch->set($product_title);

  $ewrapper->dp_mm->set($product_title);
  $ewrapper->pp_inch->set($product_title);
  $ewrapper->pp_mm->set($product_title);
  $ewrapper->size_l->set($product_title);

  $ewrapper->size_w->set($product_title);
  $ewrapper->size_h->set($product_title);
  $ewrapper->awt->set($product_title);
  //$ewrapper->save();

  // update product
//  $product = importer_get_prodcut_by_title($product_title);
//  $node_wrapper = entity_metadata_wrapper('node', $product);
//  $node_wrapper->field_product_specification->set([$ewrapper->value()->nid]);
//  $node_wrapper->save();
}

// helper function: get_product_by_title
function importer_get_prodcut_by_title($title)
{
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('title', '%' . $title . '%', 'LIKE');
  $result = $query->execute();
  if (!empty($result['node'])) {
    foreach ($result['node'] as $node) {
      if ($node->type == 'product') {
        $node = entity_load('node', [$node->nid]);
        return current($node);
      }
    }
  }
  return null;
}

// helper function: get_file_by_filename
function importer_get_file_by_filename($filename)
{
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', '%' . $filename . '%', 'LIKE');
  $result = $query->execute();
  if (!empty($result['file'])) {
    $files = entity_load('file', array_keys($result['file']));
    $drupal_file = end($files); // get first item
  }

  return $drupal_file;
}

// helper function: insert new image and its attributes
function importer_image_attribute($file_name, $alt, $title)
{
  // get file content
  $url = getcwd() . "/sites/default/files/psehk_importer/to_be_upload/" . $file_name;
  $file_content = file_get_contents($url);

  // save image
  $file_storage_uri = 'public://psehk_importer/product_thumbnail/' . $file_name;
  $file = file_save_data($file_content, $file_storage_uri);
  $file->status = 1;
  $file->field_image['und'][0] = (array)$file;
  node_save($file);

  // delete cache
  $result = db_delete('cache_field')
    ->condition('cid', 'field:file:' . $file->fid)
    ->execute();

  // insert alt text
  $result = db_insert('field_data_field_file_image_alt_text')
    ->fields(array(
      'entity_type' => "file",
      'bundle' => "image",
      'deleted' => 0,
      'entity_id' => $file->fid,
      'revision_id' => $file->fid,
      'language' => "und",
      'delta' => "0",
      'field_file_image_alt_text_value' => $alt,
      'field_file_image_alt_text_format' => null,
    ))
    ->execute();

  // insert title text
  $result = db_insert('field_data_field_file_image_title_text')
    ->fields(array(
      'entity_type' => "file",
      'bundle' => "image",
      'deleted' => 0,
      'entity_id' => $file->fid,
      'revision_id' => $file->fid,
      'language' => "und",
      'delta' => "0",
      'field_file_image_title_text_value' => $title,
      'field_file_image_title_text_format' => null,
    ))
    ->execute();

  return $file;
}
